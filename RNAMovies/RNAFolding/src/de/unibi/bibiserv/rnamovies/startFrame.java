package de.unibi.bibiserv.rnamovies;


import static de.unibi.bibiserv.rnamovies.RNAMovies.createAndShowGUI;
import static de.unibi.bibiserv.rnamovies.RNAMovies.log;
import static de.unibi.bibiserv.rnamovies.RNAMovies.parseParameter;
import static de.unibi.bibiserv.rnamovies.RNAMovies.parseRNAStructML;
import static de.unibi.bibiserv.rnamovies.RNAMovies.parseScript;
import de.unibi.bibiserv.rnamovies.actions.Export;
import de.unibi.bibiserv.rnamovies.util.LineScanner;
import de.unibi.techfak.bibiserv.biodom.RNAStructML;
import de.unibi.techfak.bibiserv.biodom.exception.BioDOMException;
import de.unibi.techfak.bibiserv.rnamovies.thirdparty.AnimatedGifEncoder;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import static java.lang.Thread.sleep;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *c
 * @author Darshik
 */

public class startFrame extends javax.swing.JFrame {

    /**
     * Creates new form startFrame
     */
  JLabel l1, l2, l3, l4;
  JTextField inputs1,inputs2, inputs3, inputs4   ;
  JButton but;
  
  public static  String inputString;
  public static int gen;
  public static double mutate;
  public static int pop;
  public static int x;
   
   
    public startFrame() {
        initComponents();
    }
    
    

  public static boolean b=false;
  public static boolean b2=false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("RNA Sequence");

        jLabel2.setText("Population size");

        jLabel3.setText("Mutation rate (between 0-1)");

        jLabel4.setText("Number of generations ");

        jButton1.setText("Start");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("RNA Folding using Genetic Algorithm");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(91, 91, 91))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addComponent(jTextField2)
                        .addComponent(jTextField3)
                        .addComponent(jTextField4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void start()
    {
//        l1=new JLabel();
//        l1.setText(" Enter the sequence :");
//        
//        inputs1=new JTextField( 50);
//        
//        inputs1.setText("");
//        
//        l2=new JLabel();
//        l2.setText(" Enter the population :");
//        inputs2=new JTextField( 50);
//        
//        inputs2.setText("");
//        
//          l3=new JLabel();
//        l3.setText(" Enter the mutation rate (between 0-1 :");
//        inputs3=new JTextField(50);
//        
//        inputs3.setText("");
//        
//         l4=new JLabel();
//        l4.setText(" Enter number of generations :");
//        inputs4=new JTextField("",50);
//                inputs4.setText("");
//        
//        but=new JButton();
//        
//        but.setText("Start");
//        add(l1);
//        add(inputs1);
//       
//        
//        
//        
//        add(l2);
//        add(inputs2);
//       
//      
//        add(l3);
//        add(inputs3);
//        
//       
//        
//        add(l4);
//        add(inputs4);
//        
//         add(but);
        jButton1.addActionListener(
                new ActionListener(){
                    @Override
                    public void actionPerformed(
                            ActionEvent e){
                                            inputString=jTextField1.getText();
                                            pop=Integer.parseInt(jTextField2.getText());
                                            mutate=Double.parseDouble(jTextField3.getText());
                                            gen=Integer.parseInt(jTextField4.getText());
                                            b=true;
                                            invoke();
                                            b2=true;
                                          }
                                    }
                            );
        setLayout(new FlowLayout());
        setSize(700,500);
        setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
     public static String BestSolution = "";

    /**
     * @param args the command line arguments
     */
     
     
     public static String var[];
    public static void main(String args[]) throws IOException, InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(startFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(startFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(startFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(startFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        Scanner in = new Scanner(System.in);
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    new startFrame().start();
                }
            });
               var=args;
                
                   
                
                //new startFrame().setVisible(true);
//                b=true;
            
//        System.out.println("Enter the sequence: ");
//        inputString=in.next();
//     
//        System.out.println("Enter the population: ");
//        pop=in.nextInt();
//        
//        System.out.println("Enter the Mutation rate: ");
//        mutate=in.nextDouble();
//        
//        System.out.println("Enter the number of generations");
//        gen=in.nextInt();
         
         
    }
    
    public void invoke(){
        if(b==true){
            FileWriter writer2 = null;
            try {
               
                String input = inputString;
//        if(args.length >0)
//        {
//            input = args[0];                    
//        }
                int TotalGenerations = gen;
//        if(args.length >1)
//        {
//            TotalGenerations = Integer.parseInt(args[1]);
//        }
//        if(args.length ==0)
//        {
//            System.out.print("This is the assumed input\ninput = "+input);
//            System.out.print("\nTotal number of generations are "+gen);
//            System.out.print("You can give your input using following format:\n");
//            System.out.print("GA \"Input RNA Sequence\" \"Number of Generations\"");
//        }
                // Set a candidate solution
                String candidateSolution = "";
                for(int i=0; i<input.length();i++)
                {
                    candidateSolution += ".";
                }       FitnessCalc.setSolution(input,candidateSolution);
                // Create an initial population
        Population myPop = new Population(pop, true,input.length());
                // Evolve our population until we reach an optimum solution
                int generationCount = 0;
                //NextGeneration flag prevents algorithm to go further unless it become true
                boolean nextGeneration = true;
                String OutputFileName = "test";
                File file = new File(OutputFileName +".rnm");
                File file2 = new File(OutputFileName +"_BestAnswer_"+".rnm");
                try {
                    file2.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(startFrame.class.getName()).log(Level.SEVERE, null, ex);
                }   writer2 = new FileWriter(file2);
            writer2.write(">RNAfold_TestCase\n");
                writer2.write(input+"\n");
                // creates the file
                file.createNewFile();
                // creates a FileWriter Object
                FileWriter writer = new FileWriter(file);
                writer.write(">RNAfold_TestCase\n");
                writer.write(input+"\n");
                int bestfit = 0;
                while(nextGeneration)
                {
                    //while (myPop.getFittest().getFitness() < FitnessCalc.getMaxFitness()) {
                    while (generationCount < TotalGenerations) {
                        generationCount++;
                        //System.out.println("Generation: " + generationCount + " Fitness: " + myPop.getFittest().getFitness());
                        //System.out.println("Structure: " + myPop.getFittest().structure);
                        if(myPop.getFittest().getFitness()>bestfit)
                        {
                            bestfit=myPop.getFittest().getFitness();
                            BestSolution=myPop.getFittest().structure;
                        }
                        myPop = Algorithm.evolvePopulation(myPop);
                        // Writes the content to the file
                        writer.write(myPop.getFittest().structure+"\n");
                    }
                    writer2.write(BestSolution);
                    writer2.flush();
                    writer2.close();
                    writer.flush();
                    writer.close();
                    if(generationCount==TotalGenerations)
                    {
                        nextGeneration = false;
                    }
                }       
               
        
            b=false;
        }       
            // Variables declaration - do not modify
            // End of variables declaration
            catch (IOException ex) {
                Logger.getLogger(startFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    writer2.close();
                } catch (IOException ex) {
                    Logger.getLogger(startFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            Hashtable<String,Object> params = parseParameter(var);
         if (params.containsKey("nogui")) {
            log.info("Launching RNA Movies in commandline mode.");
            MoviePane movie = new MoviePane();
            /*attach data from file to movie*/
            if (params.containsKey("xml")) {
                try {
                    /* as RNAStructML */
                    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                    dbf.setNamespaceAware(true);
                    Document  dom = dbf.newDocumentBuilder().parse((String)params.get("input"));
                    RNAStructML rml = new RNAStructML(dom);
                    parseRNAStructML(movie,rml,false,false);
                } catch (ParserConfigurationException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                } catch (SAXException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                } catch(IOException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                } catch (BioDOMException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                }
            } else {
                /* as MovieScript or DSCE */
                try {
                    InputStream ini = new FileInputStream((String)params.get("input"));
                    parseScript(movie,new LineScanner(ini),false,false);
                } catch (FileNotFoundException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                }
            }
            if(movie.numFrames() < 1) {
                return;
            }
            /* outputfile */
            File out = new File((String)params.get("output"));
            /* size */
            int x = (Integer)params.get("size");
            float mx = ((float)movie.getMaxWidth()/(float)movie.getMaxHeight());    
            int y = Math.round((float)x/mx);
            
            
            /* transparent background */
            boolean trans =false;
            if (params.containsKey("trans")) {
                trans = true;
            }
            /* zoom factor */
            int zoom = 85;
            if (params.containsKey("zoom")) {
                zoom = (Integer)params.get("zoom");
            }
            /* export only one structure */
            if (params.containsKey("structure")) {
                try {
                    int structure = (Integer)(params.get("structure"));
                    if (params.containsKey("gif")) {
                        Export.writeGIF(movie,out,structure-1,zoom,trans,x,y);
                    } else if (params.containsKey("png")){
                        Export.writePNG(movie,out,structure-1,zoom,false,trans,x,y);
                    } else if (params.containsKey("jpg")){
                        Export.writeJPG(movie,out,structure-1,zoom,false,x,y);
                    } else if (params.containsKey("svg")){
                        Export.writeSVG(movie,out,structure-1,trans);
                    }
                }catch (IOException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                }
            } else {
                /*export movie as XXX*/
                try {
                    int steps = 10;
                    if (params.containsKey("steps")) {
                        steps = (Integer)params.get("steps");
                    }
                    int fps = 10;
                    if (params.containsKey("fps")) {
                        fps = (Integer)params.get("fps");
                    }
                    if (params.containsKey("gif")){
                        AnimatedGifEncoder ani  = new AnimatedGifEncoder();
                        ani.start((String)params.get("output"));
                        ani.setFrameRate(fps);
                        ani.setRepeat(0);
                        ani.setSize(x,y);
                        /* create a BufferedImage as basis */
                        BufferedImage image = null;
                        for (int i = 0; i < movie.numFrames(); ++i ){
                            for (int e = 0; e < steps; ++e ){
                                if(trans) {
                                    image = new BufferedImage(x, y, BufferedImage.TYPE_4BYTE_ABGR);
                                } else {
                                    image = new BufferedImage(x,y,BufferedImage.TYPE_3BYTE_BGR);
                                }
                                Graphics2D gc = (Graphics2D)image.getGraphics();
                                
                                /* set rendering hints */
                                gc.setRenderingHints(movie.getRenderingHints());
                                
                                /* set background color */
                                if(trans){
                                    gc.setBackground(new Color(255, 255, 255, 255));
                                }else {
                                    gc.setBackground(movie.getBackground());
                                }
                                
                                /* clear image */
                                gc.clearRect(0, 0, x, y);
                                double zoomf = (double)x/(double)movie.getMaxWidth()* zoom * 0.01;                          
                                /* center structure relative to image */
                                double xTrans = (x-movie.getMaxWidth()*zoomf)/2;
                                double yTrans = (y-movie.getMaxHeight()*zoomf)/2;
                                gc.translate(xTrans, yTrans);
                                /* draw structure on graphics context */                      
                                if (i == movie.numFrames()-1) {
                                    movie.drawFrame(gc,i);
                                    e = steps;
                                } else {
                                   
                                    movie.drawFrame(gc,i,steps,e);
                                }
                                ani.addFrame(image);
                            }
                        }
                        ani.finish();                    
                    } else {
                        for (int i = 0; i < movie.numFrames(); ++i ){
                            if (params.containsKey("png")){
                                Export.writePNG(movie,out,i,zoom,false,trans,x,y);
                            } else if (params.containsKey("jpg")){
                                Export.writeJPG(movie,out,i,zoom,false,x,y);
                            } else if (params.containsKey("svg")){
                                Export.writeSVG(movie,out,i,trans);
                            }
                        }                       
                    }
                } catch (IOException e){
                    log.severe(e.getMessage());
                    System.exit(1);
                }
            }            
        } else {
            log.info("Launching RNA Movies.");
            try {
                UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            } catch(Exception e1) {
                log.severe("Could not load javax.swing.plaf.metal.MetalLookAndFeel, trying cross platform Look and Feel.");
                try {
                    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
                } catch(Exception e2) {
                    log.severe("Critical: Could not load cross platform Look and Feel.");
                    System.exit(1);
                }
            }
            
            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {createAndShowGUI();}
            });
        
         
        
        
        }
        }
        

    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

}